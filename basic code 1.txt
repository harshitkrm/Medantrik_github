import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

void main() {
  runApp(const MyApp());
}

class BluetoothState extends ChangeNotifier {
  bool _isBluetoothOn = false;
  String? _connectedDevice;
  final Map<String, String> _deviceData = {
    'spo2': '',
    'lungPressure': '',
    'lungCapacity': '',
  };
  final Map<String, bool> _loadingStates = {
    'spo2': false,
    'lungPressure': false,
    'lungCapacity': false,
  };

  // Simulated user data
  bool _isLoggedIn = false;
  String _userName = '';
  String _userEmail = '';

  final List<String> _dummyDevices = [
    'Medantrix Device',
    'Speaker',
    'Headphones',
    'watches'
  ];

  bool get isBluetoothOn => _isBluetoothOn;
  String? get connectedDevice => _connectedDevice;
  List<String> get availableDevices => _dummyDevices;
  Map<String, String> get deviceData => _deviceData;
  Map<String, bool> get loadingStates => _loadingStates;
  bool get isLoggedIn => _isLoggedIn;
  String get userName => _userName;
  String get userEmail => _userEmail;

  void login(String name, String email) {
    _isLoggedIn = true;
    _userName = name;
    _userEmail = email;
    notifyListeners();
  }

  void logout() {
    _isLoggedIn = false;
    _userName = '';
    _userEmail = '';
    notifyListeners();
  }

  void turnOnBluetooth() {
    _isBluetoothOn = true;
    notifyListeners();
  }

  void connectToDevice(String deviceName) {
    _connectedDevice = deviceName;
    notifyListeners();
  }

  Future<void> getMedicalData(String dataType) async {
    _loadingStates[dataType] = true;
    notifyListeners();
    
    // Simulate delay in getting data
    await Future.delayed(const Duration(seconds: 1));
    
    switch (dataType) {
      case 'spo2':
        _deviceData['spo2'] = '98%';
      case 'lungPressure':
        _deviceData['lungPressure'] = '12 kPa';
      case 'lungCapacity':
        _deviceData['lungCapacity'] = '6 L';
    }
    _loadingStates[dataType] = false;
    notifyListeners();
  }
}

class BluetoothDialog extends StatelessWidget {
  const BluetoothDialog({super.key});

  @override
  Widget build(BuildContext context) {
    return Dialog(
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(16),
      ),
      child: Consumer<BluetoothState>(
        builder: (context, bluetoothState, child) {
          return AnimatedContainer(
            duration: const Duration(milliseconds: 300),
            padding: const EdgeInsets.all(16),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    const Text(
                      'Available Devices',
                      style: TextStyle(
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    IconButton(
                      icon: const Icon(Icons.close),
                      onPressed: () => Navigator.of(context).pop(),
                    ),
                  ],
                ),
                const Divider(),
                ListView.builder(
                  shrinkWrap: true,
                  itemCount: bluetoothState.availableDevices.length,
                  itemBuilder: (context, index) {
                    final device = bluetoothState.availableDevices[index];
                    return ListTile(
                      leading: const Icon(Icons.bluetooth),
                      title: Text(device),
                      onTap: () async {
                        if (device == 'Medantrix Device') {
                          // Show connecting dialog
                          showDialog(
                            context: context,
                            barrierDismissible: false,
                            builder: (context) => AlertDialog(
                              content: Row(
                                children: [
                                  const CircularProgressIndicator(),
                                  const SizedBox(width: 16),
                                  Text('Connecting to $device...'),
                                ],
                              ),
                            ),
                          );

                          // Simulate connection delay
                          await Future.delayed(const Duration(seconds: 1));

                          // Close connecting dialog and main dialog
                          Navigator.of(context).pop();
                          Navigator.of(context).pop();

                          bluetoothState.connectToDevice(device);
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(
                              content: Text('Connected to $device'),
                              behavior: SnackBarBehavior.floating,
                            ),
                          );
                        }
                      },
                    );
                  },
                ),
              ],
            ),
          );
        },
      ),
    );
  }
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return ChangeNotifierProvider(
      create: (context) => BluetoothState(),
      child: MaterialApp(
        title: 'Medantrix App',
        theme: ThemeData(
          colorScheme: ColorScheme.fromSeed(seedColor: Colors.blue),
          useMaterial3: true,
        ),
        home: const HomePage(),
      ),
    );
  }
}

class HomePage extends StatelessWidget {
  const HomePage({super.key});

  Widget _buildMedicalDataButton({
    required String title,
    required String dataType,
    required BluetoothState state,
    required BuildContext context,
  }) {
    return Card(
      elevation: 2,
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            ElevatedButton(
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
              ),
              onPressed: state.connectedDevice != null
                  ? () => state.getMedicalData(dataType)
                  : null,
              child: Text(title),
            ),
            if (state.loadingStates[dataType]!)
              const Padding(
                padding: EdgeInsets.only(top: 8.0),
                child: CircularProgressIndicator(),
              ),
            if (state.deviceData[dataType]!.isNotEmpty)
              Padding(
                padding: const EdgeInsets.only(top: 8.0),
                child: Text(
                  '${title}: ${state.deviceData[dataType]}',
                  style: Theme.of(context).textTheme.titleMedium,
                ),
              ),
          ],
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Container(
              padding: const EdgeInsets.all(8.0),
              child: Image.asset(
                'assets/images/medantrix_logo.png',
                height: 32.0,
                errorBuilder: (context, error, stackTrace) {
                  print('Error loading logo: $error');
                  return const Icon(Icons.error);
                },
              ),
            ),
            const Text('Medantrix Medical Device'),
          ],
        ),
        centerTitle: true,
        actions: [
          Consumer<BluetoothState>(
            builder: (context, state, child) {
              return IconButton(
                icon: Icon(
                  Icons.bluetooth,
                  color: state.connectedDevice != null ? Colors.blue : null,
                ),
                onPressed: () {
                  state.turnOnBluetooth();
                  showDialog(
                    context: context,
                    builder: (context) => const BluetoothDialog(),
                  );
                },
              );
            },
          ),
          Consumer<BluetoothState>(
            builder: (context, state, child) {
              return state.isLoggedIn
                  ? PopupMenuButton<String>(
                      icon: const CircleAvatar(
                        child: Icon(Icons.person),
                      ),
                      onSelected: (value) {
                        if (value == 'logout') {
                          state.logout();
                        }
                      },
                      itemBuilder: (BuildContext context) => [
                        PopupMenuItem(
                          enabled: false,
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(state.userName,
                                  style: const TextStyle(fontWeight: FontWeight.bold)),
                              Text(state.userEmail,
                                  style: const TextStyle(fontSize: 12)),
                            ],
                          ),
                        ),
                        const PopupMenuDivider(),
                        const PopupMenuItem(
                          value: 'logout',
                          child: Text('Logout'),
                        ),
                      ],
                    )
                  : IconButton(
                      icon: const Icon(Icons.login),
                      onPressed: () {
                        state.login('John Doe', 'john@example.com');
                      },
                    );
            },
          ),
          const SizedBox(width: 8),
        ],
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
      ),
      drawer: Drawer(
        child: Column(
          children: [
            DrawerHeader(
              decoration: BoxDecoration(
                color: Theme.of(context).colorScheme.primary,
              ),
              child: Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Image.asset(
                      'assets/images/medantrix_logo.png',
                      height: 64.0,
                      errorBuilder: (context, error, stackTrace) {
                        print('Error loading logo: $error');
                        return const Icon(Icons.error);
                      },
                    ),
                    const SizedBox(height: 8),
                    const Text(
                      'Medantrix',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 24,
                      ),
                    ),
                  ],
                ),
              ),
            ),
            ListTile(
              leading: const Icon(Icons.home),
              title: const Text('Home'),
              onTap: () {
                Navigator.pop(context);
              },
            ),
            ListTile(
              leading: const Icon(Icons.settings),
              title: const Text('Settings'),
              onTap: () {
                Navigator.pop(context);
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('Settings coming soon!')),
                );
              },
            ),
            ListTile(
              leading: const Icon(Icons.history),
              title: const Text('History'),
              onTap: () {
                Navigator.pop(context);
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('History coming soon!')),
                );
              },
            ),
            ListTile(
              leading: const Icon(Icons.help),
              title: const Text('Help & Support'),
              onTap: () {
                Navigator.pop(context);
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('Help & Support coming soon!')),
                );
              },
            ),
            const Spacer(),
            const Divider(),
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Text(
                'Version 1.0.0',
                style: Theme.of(context).textTheme.bodySmall,
              ),
            ),
          ],
        ),
      ),
      body: Consumer<BluetoothState>(
        builder: (context, state, child) {
          return SingleChildScrollView(
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  if (state.isLoggedIn)
                    Card(
                      child: Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: Text(
                          'Hi, ${state.userName}!',
                          style: Theme.of(context).textTheme.headlineSmall,
                        ),
                      ),
                    ),
                  const SizedBox(height: 16),
                  if (state.connectedDevice != null)
                    Card(
                      child: Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: Text(
                          'Connected to: ${state.connectedDevice}',
                          style: Theme.of(context).textTheme.titleLarge,
                          textAlign: TextAlign.center,
                        ),
                      ),
                    ),
                  const SizedBox(height: 20),
                  _buildMedicalDataButton(
                    title: 'Get SPO2',
                    dataType: 'spo2',
                    state: state,
                    context: context,
                  ),
                  const SizedBox(height: 16),
                  _buildMedicalDataButton(
                    title: 'Get Lung Pressure',
                    dataType: 'lungPressure',
                    state: state,
                    context: context,
                  ),
                  const SizedBox(height: 16),
                  _buildMedicalDataButton(
                    title: 'Get Lung Capacity',
                    dataType: 'lungCapacity',
                    state: state,
                    context: context,
                  ),
                ],
              ),
            ),
          );
        },
      ),
    );
  }
}
